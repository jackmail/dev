#!/bin/sh
# Copyright 2016 The dev Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

#
# Useage:
#     dev --help
#
opa_rem[help]="Help topic and usage information"
opa_als[h]="help"
opa_fun_help() {
    dev_help_useage; dev_help_options; dev_help_files; return 0
}

#
# Useage:
#     dev --projects
#
opa_rem[projects]="List all of the available projects"
opa_als[projects]="projects"
opa_fun_projects() {
    return 0
    # FIXME
}

#
# Useage:
#     dev --options
#
opa_rem[options]="List all optional arguments"
opa_als[options]="options"
opa_fun_options() {
    declare opt als ret

    for als in "${!opa_als[@]}"; do
        opt="${opa_als[$als]}"
        ret="$ret --${opt//_/-}" && [ "$opt" != "$als" ] && ret="$ret -$als"
    done

    echo "${ret:1}"; return 0
}

#
# Useage:
#     dev --completion
#     dev --completion <prj> <cmd-file>
#
opa_rem[completion]="List all project, command files or function files"
opa_als[completion]="completion"
opa_fun_completion() {
    declare ret key

    if [[ $# -le 0 || -z "$1" ]]; then
        dev_cmd_files $glb_wkdir/cmd
    else
        dev_files $1
        for key in $(compgen -A function); do
            [ "${key:0:4}" == "cmd_" ] && ret="$ret ${key:4}"
        done
    fi

    echo "${ret:1}"; return 1
}

#
# Useage:
#     dev --deploy <prj:user>
#
opa_rem[deploy]="Remote deployment"
opa_als[deploy]="deploy"
opa_fun_deploy() {
    [ -z "$1" ] && echo "Useage: dev --deploy <prj:user>" >&2 && return 1

    declare cmd user host sudoer init_tar=/tmp/dev-init.tar

    cmd="mkdir -m 700 -p \$HOME/.ssh &&"
    cmd="$cmd cat > \$HOME/.ssh/authorized_keys &&"
    cmd="$cmd chmod 600 \$HOME/.ssh/authorized_keys"

    [ -f $init_tar ] && rm -f $init_tar

    cd $glb_wkdir
    tar --exclude='./dev-init.tar' \
        --exclude='./*.sublime-*' \
        --exclude='./var/log' \
        --exclude='./var/tmp' \
        -cf $init_tar .

    for host in "${!cfg_nodes[@]}"; do
        sudoer="${cfg_nodes[$host]}"
        [ -z $1 ] && user="$sudoer" || user="$1"

        # public key, remotely write to a file using SSH
        # It's will overwrite authorized_keys
        cat $glb_ssh_key.pub | dev_ssh $user@$host "$cmd"
        dev_scp $glb_ssh_key $glb_ssh_key.pub $user@$host:\$HOME/.ssh
        dev_scp $init_tar $glb_base/bin/dev-installer $user@$host:\$HOME
        dev_ssh $user@$host "\$HOME/dev-installer $glb_wkdir $sudoer"
    done

    rm -f $init_tar; return 1
}

#
# Useage:
#     dev --init <prj>
#
opa_rem[init]="Create a new project directory structure"
opa_als[init]="init"
opa_fun_init() {
    [ -z "$1" ] || [ "$1" = "dev" ] && echo "Useage: dev --init <prj>" >&2 && return 1

    declare prj="$1" wkdir="${cfg_projects[$1]}";
    [ -z "$wkdir" ] && echo "Project config path error" >&2 && return 1
    [ -d $wkdir/bin ] || [ -d $wkdir/cmd ] && echo "Project $prj exists" >&2 && return 1

    mkdir -p \
        $wkdir/bin \
        $wkdir/cmd \
        $wkdir/etc/cmd \
        $wkdir/lib \
        $wkdir/var/log \
        $wkdir/var/misc \
        $wkdir/var/pkg \
        $wkdir/var/tmp

    [ -f $wkdir/lib/bootstrap ] || touch $wkdir/lib/bootstrap; return 1
}

#
# Useage:
#     dev -a
#     dev --all
#
opa_rem[all]="Runs on all of the available nodes"
opa_als[a]="all"
opa_fun_all() {
    # 0: Local machine, 1: Specifies nodes, 2: Specifies group 3: All nodes
    glb_run_level=3; return 0
}

#
# Useage:
#     dev --daemon
#
opa_rem[daemon]="Run a command immune to hangups, with output to a non-tty"
opa_als[daemon]="daemon"
opa_fun_daemon() {
    glb_run_daemon=1; return 0
}

#
# Useage:
#     dev -u [user]
#     dev --sudo [user]
#
opa_rem[sudo]="Execute a command as another user"
opa_als[u]="sudo"
opa_fun_sudo() {
    glb_run_sudo=1; return 0
}

#
# Useage:
#     dev --xtrace
#
opa_rem[xtrace]="Print command traces before executing command"
opa_als[xtrace]="xtrace"
opa_fun_xtrace() {
    # trap 'echo "# $BASH_COMMAND"' DEBUG

    # Prints shell input lines as they are read
    # set -o verbose
    set -o xtrace; return 0
}
