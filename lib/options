#!/bin/sh
# Copyright 2016 The dev Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

#
# Usage:
#     dev --help
#
opa_rem[help]="Help topic and usage information"
opa_als[h]="help"
opa_fun_help() {
    if [[ $# -le 0 || -z "$1" ]]; then
        dev_run 0 || return 0
        dev_help_usage
        dev_help_options
        # dev_help_projects
        return 0
    else
        dev_run 0 || return 1
        dev_help_usage "$1"
        dev_help_options
        # dev_help_projects
        return 1
    fi
}

#
# Usage:
#     dev --options
#
opa_rem[options]="List all optional arguments"
opa_als[options]="options"
opa_fun_options() {
    dev_run 0 || return 0
    dev_options
    return 0
}

#
# Usage:
#     dev --completion <cur>
#
opa_rem[completion]="List all command files or functions"
opa_als[completion]="completion"
opa_fun_completion() {
    glb_run_compact=1
    dev_run 2 || return $#
    dev_func "dev_completion" || return $#
    [ -z "$1" ] && glb_argv="" && return 0 || glb_argv="$1" && return 1
}

#
# Usage:
#     dev --deploy [prj]
#
opa_rem[deploy]="Remote deployment"
opa_als[deploy]="deploy"
opa_fun_deploy() {
    dev_run 2 || return $#
    dev_func "dev_deploy" || return $#
    [ -z "$1" ] && glb_argv="" && return 0 || glb_argv="$1" && return 1
}

#
# Usage:
#     dev --init <prj>
#
opa_rem[init]="Create a new project directory structure"
opa_als[init]="init"
opa_fun_init() {
    dev_run 0 || return $#

    [ -z "$1" ] && echo "Usage: dev --init <prj>" >&2 && return 0

    declare prj="$1" wkdir="${cfg_projects[$1]}"

    [ "$prj" = "dev" ] && echo "Project dev no need init" >&2 && return 1
    [ -z "$wkdir" ] && echo "Config error: cfg_projects[$prj], in $glb_base/etc/dev.conf" >&2 && return 1
    [ -d $wkdir/bin ] || [ -d $wkdir/cmd ] && echo "Project $prj exists" >&2 && return 1

    mkdir -p \
        $wkdir/bin \
        $wkdir/cmd \
        $wkdir/etc/cmd \
        $wkdir/lib \
        $wkdir/var/log \
        $wkdir/var/misc \
        $wkdir/var/pkg \
        $wkdir/var/tmp

    [ -f $wkdir/lib/bootstrap ] || touch $wkdir/lib/bootstrap

    return 1
}

#
# Usage:
#     dev --node <host>
#
opa_rem[node]=""
opa_als[n]="node"
opa_fun_node() {
    [ -z "$1" ] && echo "Usage: dev --node <host>" >&2 && return 0
    [ -z "${cfg_nodes[$1]}" ] && echo "Node not found: $1" >&2 && return 1
    glb_run_nodes[$1]="${cfg_nodes[$1]}"
    return 1
}

#
# Usage:
#     dev -a
#     dev --all
#
opa_rem[all]="Runs on all of the available nodes"
opa_als[a]="all"
opa_fun_all() {
    declare host
    for host in "${!cfg_nodes[@]}"; do
        glb_run_nodes[$host]="${cfg_nodes[$host]}"
    done
    return 0
}

#
# Usage:
#     dev --daemon
#
opa_rem[daemon]="Run a command immune to hangups, with output to a non-tty"
opa_als[daemon]="daemon"
opa_fun_daemon() {
    [ "$glb_func" != "dev_completion" ] && glb_run_daemon=1
    return 0
}

#
# Usage:
#     dev -u
#     dev --sudo
#
opa_rem[sudo]="Execute a command as another user"
opa_als[u]="sudo"
opa_fun_sudo() {
    glb_run_sudo=1
    return 0
}

#
# Usage:
#     dev --xtrace
#
opa_rem[xtrace]="Print command traces before executing command"
opa_als[xtrace]="xtrace"
opa_fun_xtrace() {
    set -o xtrace

    # trap 'echo "# $BASH_COMMAND"' DEBUG

    # Prints shell input lines as they are read
    # set -o verbose
    return 0
}

#
# Usage:
#     dev --user <user>
#
opa_rem[user]="Run a command with substitute user"
opa_als[user]="user"
opa_fun_user() {
    [ -z "$1" ] && echo "Usage: dev --user <user>" >&2 && return 0
    glb_user="$1"
    return 1
}

#
# Usage:
#     dev --dry-run
#
opa_rem[dry-run]="Only report what would be done"
opa_als[dry-run]="dry-run"
opa_fun_dry_run() {
    glb_run_dry=1
    return 0
}

#
# Usage:
#     dev --passwd
#
opa_rem[passwd]="Console Password Manager"
opa_als[passwd]="passwd"
opa_fun_passwd() {
    return 0
}

#
# Usage:
#     dev --repos
#
opa_rem[repos]="Multiple SCM repository management tool"
opa_als[repos]="repos"
opa_fun_repos() {
    return 0
}

#
# Usage:
#     dev --version
#
opa_rem[version]=""
opa_als[version]="version"
opa_fun_version() {
    dev_run 0 || return 0
    echo "dev version $glb_version"
    return 0
}
