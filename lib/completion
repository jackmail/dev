#!/bin/sh

# devcompletion :cur <prj> [--options] <cmd-file>
# devcompletion :cur [--options] <prj> <cmd-file>


#
# Usage:
#     dev_options
#
dev_options() {
    declare opt als ret

    for als in "${!opa_als[@]}"; do
        opt="${opa_als[$als]}"
        ret="$ret --${opt//_/-}" && [ "$opt" != "$als" ] && ret="$ret -$als"
    done

    echo "${ret:1}"
}

#
# Usage:
#     dev_completion 
#
dev_completion() {
    declare ret key prj wkdir

    # echo "glb_prj:$glb_prj" >&2
    # echo "glb_wkdir:$glb_wkdir" >&2
    if [ "$glb_prj" == "dev" ]; then
        wkdir=$glb_base
        if [ -z $glb_file ]; then
            # List all projects
            for prj in "${!cfg_projects[@]}"; do
                ret="$ret $prj"
            done
        fi
    else
        wkdir=$glb_wkdir
    fi

    if [ -z $glb_file ]; then
        # List files in project
        ret="$ret $(dev_cmd_files $wkdir/cmd | tr '\n' ' ')"
    else
        # List all cmd-func
        [ -f $wkdir/cmd/$glb_file.sh ] && . $wkdir/cmd/$glb_file.sh
        for key in $(compgen -A function); do
            [ "${key:0:4}" == "cmd_" ] && ret="$ret ${key:4}"
        done
    fi

    echo "${ret:1}"; return 0
}

#
# A function called main is required for scripts long enough to contain at
# least one other function.The last non-comment line in the file should be
# a call to main: dev_main "$@"
#
dev_main() {
    # cur
    declare cur="${1:1}" && shift
    [ "${cur:0:1}" == "-" ] && dev_options && return 0

    # Porject name and working directory
    if [ "${1:0:1}" != "-" ]; then
        dev_prj $@ && shift
    fi

    declare opt func args argv shft

    # Prepare optional arguments
    while true ; do
        opt=""; argv=""; shft="true"
        if [[ "$1" == "--" || "$1" == "-" ]]; then
            shift; break
        elif [[ "${1:0:2}" == "--" ]]; then
            opt="${1:2}"; shift
        elif [[ "${1:0:1}" == "-" ]]; then
            [ -z "${opa_als[${1:1}]}" ] && opt="${1:1}" || opt="${opa_als[${1:1}]}"; shift
            [ -z "$opt" ] && echo "Unrecognized option -${1:1}" >&2
        else
            break
        fi

        [ -z $opt ] && continue

        if [[ "$(expr index $opt '=')" -ge 1 ]]; then
            IFS='=' read -ra args <<< "$opt"
            opt="${args[0]}"; argv="${args[1]}";
        elif [[ ! -z "$1" && "${1:0:1}" != "-" ]]; then
            argv="$1"; shft="shift"
        fi

        func="opa_fun_${opt/-/_}"
        if [[ "$(declare -F $func)" == "$func" ]]; then
            $func $argv || $shft
        fi
    done

    dev_prj $@ && shift
    dev_file $@ && shift
    dev_completion
}

