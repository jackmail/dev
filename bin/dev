#!/bin/sh
# Copyright 2016 The dev Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# trace ERR through pipes
set -o pipefail

# set -e : exit the script if any statement returns a non-true return value
set -o errexit

# Run level: 0: Local, 1: Specifies nodes, 2: Specifies group 3: All nodes
declare -g glb_run_level=0 glb_run_sudo=0 glb_run_daemon=0
declare -g glb_file glb_func glb_user

# For option arguments
declare -Ag opa_rem opa_als

# The sudo prefix
[ "$(whoami)" != "root" ] && declare -gr glb_sudo="sudo" || declare -gr glb_sudo=""

#
# Useage information.
#
dev_help_useage() {
    echo "Usage: dev [options] [project] <cmd-file> <cmd-function> [cmd-arguments]"; echo
}

#
# List all options
#
dev_help_options() {
    echo "Optional arguments:"; echo

    declare opt sht als
    for als in "${!opa_als[@]}"; do
        opt="${opa_als[$als]}"
        [ "$opt" != "$als" ] && sht="-$als, " || sht=""
        echo -e "  $sht--${opt//_/-} \t ${opa_rem[$opt]}"
    done

    echo
}

#
# List all command files.
#
dev_help_files() {
    echo "These are the all aviliable <cmd-file>s:"; echo

    declare ret
    dev_cmd_files $glb_wkdir/cmd
    echo ${ret:1} |tr " " "\n" |column -c $(tput cols) |fmt

    echo
}

#
# List all functions of included <cmd-file>s.
#
dev_help_functions() {
    echo "These are the all aviliable <cmd-function>s:"; echo

    for i in $(compgen -A function); do
        if [[ "${i:0:4}" == "cmd_" ]]; then
            echo -e "  ${i:4} \t in $glb_wkdir/cmd/$glb_file:$i()"
        fi
    done

    echo
}

#
# Recursively process subdirectories
#
dev_cmd_files() {
    for i in $(ls $1); do
        if [[ -d $1/$i ]]; then
            dev_cmd_files $1/$i $i/
        elif [[ "${i: -4}" == ".cmd" ]]; then
            ret="$ret $2${i:0:-4}"
        fi
    done
}

#
# Useage:
#     dev_scp <user-host> <command>
#
dev_scp() {
    declare cmd="scp -i $glb_ssh_key -o StrictHostKeyChecking=no $@"
    echo "$cmd" && $cmd
}

#
# Useage:
#     dev_ssh <user-host> <command>
#
dev_ssh() {
    declare cmd="ssh -i $glb_ssh_key -o StrictHostKeyChecking=no $@"
    echo "$cmd" && $cmd
}

#
# Useage:
#     dev_dnf
#
dev_dnf() {
    # -4     Resolve to IPv4 addresses only.
    # --allowerasing
    #        Allow  erasing  of  installed  packages  to  resolve dependencies.
    declare cmd="dnf -y --allowerasing -4 $@"
    echo "$cmd" && $cmd
}

#
# Useage:
#     dev_base <dev-path>
#
dev_base() {
    declare base="$0" cfg;
    [ -L "$base" ] && base=$(readlink -f $base); base=$(dirname $(realpath $base))
    if [ "$(basename $base)" == "bin" ]; then
        declare -gr glb_base="$(dirname $base)"
    else
        declare -gr glb_base="$base"
    fi

    for cfg in "$glb_base/dev.conf",  "$HOME/.dev.conf", "$glb_base/etc/dev.conf"; do
        [ -f $cfg ] && . $cfg && break
    done

    # Private key: glb_ssh_key
    [ -z "$cfg_ssh_key" ] && declare -gr glb_ssh_key="$HOME/.ssh/id_rsa" || \
        declare -gr glb_ssh_key="$HOME/.ssh/$cfg_ssh_key"
}

#
# Useage:
#     dev_project <prj>
#
dev_prj() {
    if [ $# -ge 1 ] && [ -n "${cfg_projects[$1]+1}" ]; then
        declare -gr glb_prj="$1" glb_wkdir=${cfg_projects[$1]}; return 0
    else
        declare -gr glb_prj="dev" glb_wkdir=$glb_base; return 1
    fi
}

#
# Prepare command files
# Useage:
#     dev_cmd <cmd-file>
#
dev_cmd() {
    if [[ $# -le 0 || -z "$1" ]]; then
        dev_help_useage >&2; dev_help_options >&2; dev_help_files >&2; return 1
    fi

    [ -f $glb_wkdir/lib/bootstrap ] && . $glb_wkdir/lib/bootstrap
    [ -f $glb_wkdir/etc/cmd/$1.conf ] && . $glb_wkdir/etc/cmd/$1.conf
    [ -f $glb_wkdir/cmd/$1.var ] && . $glb_wkdir/cmd/$1.var
    if [ ! -f $glb_wkdir/cmd/$1.cmd ]; then
        echo "Command file not found: $glb_wkdir/cmd/$1.cmd" >&2; return 1
    fi

    . $glb_wkdir/cmd/$1.cmd
    if [[ $# -eq 1 || -z "$2" ]]; then
        echo "Missing command function" >&2; echo >&2; dev_help_functions >&2; return 1
    fi

    glb_file="$1"; glb_func="$1"; return 0
}

#
# Execute the command
# Useage:
#     dev_run <cmd-file> <cmd-function> [cmd-arguments]
#
dev_run() {
    declare cmd="" fun=${2/-/_}

    [[ "${fun:0:4}" == "cmd_" ]] || fun="cmd_$fun"
    if [[ "$(declare -F $fun)" != "$fun" ]]; then
        echo "dev: command not found: $fun" >&2; return 1
    fi

    if [[ $glb_run_level -eq 0 ]]; then
        # Run in local machine
        set -- "${@:3}" && dev_exec_local $fun $@
    elif [[ $glb_run_level -eq 1 ]]; then
        # FIXME Run in specifies nodes
        :
    elif [[ $glb_run_level -eq 2 ]]; then
        # FIXME Run in specifies group
        :
    elif [[ $glb_run_level -eq 3 ]]; then
        # Run in all nodes
        cmd="dev_exec_remote $glb_base/bin/dev"; $cmd $@
    else
        echo "dev: run level error: $glb_run_level" >&2; return 1
    fi
}

#
# Useage:
#     dev_exec_remote dev [options] <cmd-file> <cmd-function> [cmd-arguments]
#
dev_exec_remote() {
    if [[ "${#cfg_nodes[@]}" -le 0 ]]; then
        echo "dev: empty nodes" >&2; return 1
    fi

    declare cmd user host

    for host in "${!cfg_nodes[@]}"; do
        user="${cfg_nodes[$host]}"
        cmd="dev_ssh $user@$host"
        [ $glb_run_sudo -eq 1 ] && cmd="$cmd sudo"

        set +o errexit
        dev_exec $host $user $cmd $@
        set -o errexit

        echo
    done
}

#
# Useage:
#     dev_exec_local <command> <arguments>...
#
dev_exec_local() {
    declare user="$(whoami)" host="127.0.0.1"

    if [[ $glb_run_sudo -eq 1 ]]; then
        dev_exec $host $user sudo $glb_base/bin/dev $glb_file $@
    else
        dev_exec $host $user $@
    fi
}

#
# Useage:
#     dev_exec <host> <user> <command> <arguments>...
#
dev_exec() {
    declare cmd log_err log_out
    declare host="$1"; shift
    declare user="$1"; shift
    declare desc="[$user@$host $(date '+%Y-%m-%d %H:%M:%S')]"

    log_out="$glb_wkdir/var/log/$host.out"
    log_err="$glb_wkdir/var/log/$host.err"

    echo "$desc" >> $log_out
    echo "$desc" >> $log_err

    chmod a+wx $log_out $log_err

    if [[ $glb_run_daemon -eq 1 ]]; then
        cmd="nohup $@ >>$log_out 2>>$log_err &"
        echo "$cmd" && echo "$cmd" >> $log_out && echo "$cmd" >>$log_err; $cmd

        echo "PID: $!"
        # echo "out: $(< $log_out)"
        # echo "err: $(< $log_err)"
    else
        cmd="$@"
        echo "$cmd" && echo "$cmd" >> $log_out && echo "$cmd" >>$log_err; $cmd

        # echo "$?"
    fi
}

#
# A function called main is required for scripts long enough to contain at
# least one other function.The last non-comment line in the file should be
# a call to main: dev_main "$@"
#
dev_main() {
    [ -f $glb_base/lib/options ] && . $glb_base/lib/options

    declare opt arg

    # Optional arguments
    while true ; do
        if [[ "$1" == "--" || "$1" == "-" ]]; then
            shift; break
        elif [[ "${1:0:2}" == "--" ]]; then
            opt="${1:2}"; shift
        elif [[ "${1:0:1}" == "-" ]]; then
            opt="${opa_als[${1:1}]}"; shift
            [ -z "$opt" ] && echo "dev: unrecognized option -${1:1}" >&2
        else
            break
        fi

        [ -z $opt ] && continue

        if [[ "$(expr index $opt '=')" -ge 1 ]]; then
            IFS='=' read -ra arg <<< "$opt"
            opa_fun_${arg[0]/-/_} "${arg[1]}"
        elif [[ ! -z "$1" && "${1:0:1}" != "-" ]]; then
            opa_fun_${opt/-/_} "$1" || shift
        else
            opa_fun_${opt/-/_}
        fi
    done

    dev_prj $@ && shift; dev_cmd $@ || return 1; shift; shift; dev_run $@
}

# Call to main function. custom function declare before here.
dev_base; dev_main $@
