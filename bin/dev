#!/bin/sh
# Copyright 2016 The dev Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

#
# Shell Style Guide: https://google.github.io/styleguide/shell.xml
#
# dev_xxx: Framwork functions, declared in bin/dev.
# glb_xxx: Global variables, declared in bin/dev.
#
# opa_rem: Optional arguments description variables(readonly).
# opa_als: Alias of optional arguments(readonly).
# opa_fun_xxx: Optional arguments function.
#
# cfg_xxx: Configurations, declared in config file(readonly).
# cmd_xxx: Command function, declared in xxx.cmd files by user.
# xxx: Local varialbes, declared in xxx.cmd files by user. Declare
#      function-specific variables with local. Declaration and assignment
#      should be on different lines. for example:
#          local file
#          file="/path/to/file/name"
#      or (only in function)
#          declare file="/path/to/file/name"
#

# trace ERR through pipes
set -o pipefail

# set -e : exit the script if any statement returns a non-true return value
set -o errexit

# Run-level 0:Local machine, 1:Specifies nodes, 2:Specifies group 3:All nodes
# 1:Changeable(run default) 0:Not-run(Readonly) 2:Run(Readonly) 3:Run(Compact) 4:Dry-run
declare -g glb_run=1 glb_run_level=0 glb_run_sudo=0 glb_run_daemon=0

# Command file
declare -g glb_file glb_func glb_argv glb_user

# For option arguments
declare -Ag opa_rem opa_als

# The sudo prefix
[ "$(whoami)" != "root" ] && declare -gr glb_sudo="sudo" || declare -gr glb_sudo=""

#
# Usage information.
#
dev_help_usage() {
    declare files="<cmd-file>"
    [ ! -z "$1" ] && files="$1"

    echo "Usage: dev [options] $files <cmd-function> [cmd-arguments]"; echo
}

#
# List all options
#
dev_help_options() {
    echo "Optional arguments:"; echo
    dev_help_options_items |sort; echo
}

#
# List all options
#
dev_help_options_items() {
    declare opt sht als

    for als in "${!opa_als[@]}"; do
        opt="${opa_als[$als]}"
        [ "$opt" != "$als" ] && sht=", -$als" || sht=""
        echo -e "  --${opt//_/-}$sht \t ${opa_rem[$opt]}"
    done

    # for i in $(compgen -A function); do
    #     if [[ "${i:0:8}" == "opa_fun_" ]]; then
    #         opt="${i:8}"
    #     fi
    # done
}

#
# List all command files.
#
dev_help_files() {
    [ -z $glb_wkdir ] && return 0
    echo "These are the all aviliable <cmd-file>s:"; echo

    declare ret
    ret="$ret $(dev_cmd_files $glb_wkdir/cmd)"
    echo ${ret:1} |tr " " "\n" |column -c $(tput cols) |fmt; echo
}

#
# List all functions of included <cmd-file>s.
#
dev_help_functions() {
    echo "These are the all aviliable <cmd-function>s:"; echo

    for i in $(compgen -A function); do
        if [[ "${i:0:4}" == "cmd_" ]]; then
            echo -e "  ${i:4} \t in $glb_wkdir/cmd/$glb_file:$i()"
        fi
    done

    echo
}

#
# Recursively process subdirectories
#
dev_cmd_files() {
    for i in $(ls $1); do
        if [[ -d $1/$i ]]; then
            dev_cmd_files $1/$i $i/
        elif [[ "${i: -4}" == ".cmd" ]]; then
            echo "$2${i:0:-4}"
        fi
    done
}

#
# Usage:
#     dev_scp <user-host> <command>
#
dev_scp() {
    declare cmd="scp -i $glb_ssh_key -o StrictHostKeyChecking=no $@"
    echo "$cmd" && $cmd
}

#
# Usage:
#     dev_ssh <user-host> <command>
#
dev_ssh() {
    declare cmd="ssh -i $glb_ssh_key -o StrictHostKeyChecking=no $@"
    echo "$cmd" && $cmd
}

#
# Usage:
#     dev_dnf
#
dev_dnf() {
    # -4     Resolve to IPv4 addresses only.
    # --allowerasing
    #        Allow  erasing  of  installed  packages  to  resolve dependencies.
    declare cmd="dnf -y --allowerasing -4 $@"
    echo "$cmd" && $cmd
}

#
# Usage:
#     dev_options
#
dev_options() {
    declare opt als ret

    for als in "${!opa_als[@]}"; do
        opt="${opa_als[$als]}"
        ret="$ret --${opt//_/-}" && [ "$opt" != "$als" ] && ret="$ret -$als"
    done

    echo "${ret:1}"
}

#
# Usage:
#     dev_completion [prj] [cmd-file]
#
dev_completion() {
    # echo "Args:$@" >&2
    declare ret cur="${glb_argv:1}" key prj wkdir=$glb_base
    # echo "cur: $cur" >&2

    [ "${cur:0:1}" == "-" ] && dev_options && return 0

    if [ ! -z "$1" ]; then
        wkdir="${cfg_projects[$1]}"
    fi
    # echo "WkDir: $wkdir" >&2

    if [[ $# -le 0 || -z "$wkdir" ]]; then
        # List all projects
        for prj in "${!cfg_projects[@]}"; do
            ret="$ret $prj"
        done
    elif [ $# -eq 1 ]; then
        # List all cmd-file
        ret="$ret $(dev_cmd_files $wkdir/cmd | tr '\n' ' ')"
    elif [ $# -eq 2 ]; then
        # List all cmd-func
        dev_load_files $wkdir $2
        for key in $(compgen -A function); do
            [ "${key:0:4}" == "cmd_" ] && ret="$ret ${key:4}"
        done
    fi

    echo "${ret:1}"
}

#
# Usage:
#     dev_deploy
#
dev_deploy() {
    declare wkdir

    [ -z "$glb_argv" ] && wkdir="$glb_wkdir" || wkdir="${cfg_projects[$glb_argv]}"
    [ -z "$wkdir" ] && echo "Config error: cfg_projects[$prj], in $glb_base/etc/dev.conf" >&2 && return 1

    declare cmd user host sudoer init_tar=/tmp/dev-init.tar

    cmd="mkdir -m 700 -p \$HOME/.ssh &&"
    cmd="$cmd cat > \$HOME/.ssh/authorized_keys &&"
    cmd="$cmd chmod 600 \$HOME/.ssh/authorized_keys"

    [ -f $init_tar ] && rm -f $init_tar

    cd $wkdir
    tar --exclude='./dev-init.tar' \
        --exclude='./*.sublime-*' \
        --exclude='./var/log' \
        --exclude='./var/tmp' \
        -cf $init_tar .

    for host in "${!cfg_nodes[@]}"; do
        sudoer="${cfg_nodes[$host]}"
        [ -z "$glb_user" ] && user="$sudoer" || user="$glb_user"

        # public key, remotely write to a file using SSH
        # It's will overwrite authorized_keys
        cat $glb_ssh_key.pub | dev_ssh $user@$host "$cmd"
        [ "$user" != "$sudoer" ] && dev_scp $glb_ssh_key $glb_ssh_key.pub $user@$host:\$HOME/.ssh
        dev_scp $init_tar $glb_base/bin/dev-installer $user@$host:\$HOME
        dev_ssh $user@$host "\$HOME/dev-installer $wkdir $sudoer"
    done

    rm -f $init_tar
}

#
# Usage:
#     dev_base
#
dev_base() {
    declare base="$0" cfg;
    [ -L "$base" ] && base=$(readlink -f $base); base=$(dirname $(realpath $base))
    if [ "$(basename $base)" == "bin" ]; then
        declare -gr glb_base="$(dirname $base)"
    else
        declare -gr glb_base="$base"
    fi

    for cfg in "$glb_base/dev.conf", "$HOME/.dev.conf", "$glb_base/etc/dev.conf"; do
        [ -f $cfg ] && . $cfg && break
    done

    # Private key: glb_ssh_key
    [ -z "$cfg_ssh_key" ] && declare -gr glb_ssh_key="$HOME/.ssh/id_rsa" || \
        declare -gr glb_ssh_key="$HOME/.ssh/$cfg_ssh_key"
}

#
# Usage:
#     dev_project <prj>
#
dev_prj() {
    [ ! -z "$glb_prj"] && return 1

    if [ $# -ge 1 ] && [ -n "${cfg_projects[$1]+1}" ]; then
        declare -gr glb_prj="$1" glb_wkdir=${cfg_projects[$1]}; return 0
    else
        declare -gr glb_prj="dev" glb_wkdir=$glb_base; return 1
    fi
}

#
# Prepare command files
# Usage:
#     dev_cmd <cmd-file> <cmd-func>
#
dev_cmd() {
    [ ! -z "$glb_func"] && return 1

    if [[ $# -le 0 || -z "$1" ]]; then
        dev_help_usage >&2; dev_help_options >&2; dev_help_files >&2; return 1
    fi

    if ! dev_load_files $glb_wkdir $1; then
        echo "Command file not found: $glb_wkdir/cmd/$1.cmd" >&2; return 1
    fi

    if [[ $# -eq 1 || -z "$2" ]]; then
        echo "Missing command function" >&2; echo >&2; dev_help_functions >&2; return 1
    fi

    glb_file="$1"; glb_func="$2"; return 0
}

#
# Set execution function
#
dev_func() {
    if [ ! -z "$glb_func" ]; then
        echo "Error: \$glb_func has a value: $glb_func" >&2; return 1
    else
        glb_func="$1"
    fi
}

#
# Set run state
#
dev_run() {
    if [ "$glb_run" -ne 1 ]; then
        echo "Error: \$glb_run has a value: $glb_run" >&2; return 1
    else
        glb_run="$1"
    fi
}

#
# Usage:
#     dev_load_files <prj> <cmd-file>
#
dev_load_files() {
    declare wkdir="$1" cf="$2"
    [ -f $wkdir/lib/bootstrap ] && . $wkdir/lib/bootstrap
    [ -f $wkdir/etc/dev.cmd/$cf.conf ] && . $wkdir/etc/dev.cmd/$cf.conf
    [ -f $wkdir/cmd/$cf.var ] && . $wkdir/cmd/$cf.var
    [ ! -f $wkdir/cmd/$cf.cmd ] && return 1 || . $wkdir/cmd/$cf.cmd
}

#
# Execute the command
# Usage:
#     dev_real_run <cmd-file> <cmd-function> [cmd-arguments]
#
dev_real_run() {
    declare cmd="" func=${glb_func/-/_}

    [[ "${func:0:4}" == "cmd_" || -z "$glb_file" ]] || func="cmd_$func"
    if [[ "$(declare -F $func)" != "$func" ]]; then
        echo "Command not found: $func" >&2
        return 1
    fi

    if [[ $glb_run_level -eq 0 ]]; then
        # Run in local machine
        dev_exec_local $func $@
    elif [[ $glb_run_level -eq 1 ]]; then
        # FIXME Run in specifies nodes
        :
    elif [[ $glb_run_level -eq 2 ]]; then
        # FIXME Run in specifies group
        :
    elif [[ $glb_run_level -eq 3 ]]; then
        # Run in all nodes
        dev_exec_remote $glb_base/bin/dev $@
    else
        echo "Run level error: $glb_run_level" >&2
        return 1
    fi
}

#
# Execute a command from all nodes.
# Usage:
#     dev_exec_remote dev [options] <cmd-file> <cmd-function> [cmd-arguments]
#
dev_exec_remote() {
    if [[ "${#cfg_nodes[@]}" -le 0 ]]; then
        echo "Empty nodes" >&2
        return 1
    fi

    declare cmd user host

    for host in "${!cfg_nodes[@]}"; do
        user="${cfg_nodes[$host]}"
        cmd="dev_ssh $user@$host"
        [ $glb_run_sudo -eq 1 ] && cmd="$cmd sudo"

        set +o errexit
        dev_exec $host $user $cmd $@
        set -o errexit

        echo
    done
}

#
# Usage:
#     dev_exec_local <command> <arguments>...
#
dev_exec_local() {
    declare host="127.0.0.1" user="$(whoami)"

    if [[ $glb_run_sudo -eq 1 ]]; then
        dev_exec $host $user sudo $glb_base/bin/dev $glb_prj $glb_file $@
    else
        dev_exec $host $user $@
    fi
}

#
# Usage:
#     dev_exec <host> <user> <command> <arguments>...
#
dev_exec() {
    declare cmd log_err log_out
    declare host="$1"; shift
    declare user="$1"; shift
    declare desc="[$user@$host $(date '+%Y-%m-%d %H:%M:%S')]"

    log_out="$glb_wkdir/var/log/$host.out"
    log_err="$glb_wkdir/var/log/$host.err"

    echo "$desc" >> $log_out
    echo "$desc" >> $log_err

    chmod a+wx $log_out $log_err

    # $@ 2>&1 | tee $log_out
    # ($@ | tee $log_out) 3>&1 1>&2 2>&3 | tee $log_err
    if [[ $glb_run_daemon -eq 1 ]]; then
        cmd="nohup $@ >>$log_out 2>>$log_err &"
        [ $glb_run -ne 3 ] && echo "$cmd"
        if [ $glb_run -ne 4 ]; then
            echo "$cmd" >> $log_out && echo "$cmd" >>$log_err
            $cmd

            echo "PID: $!"
            # echo "out: $(< $log_out)"
            # echo "err: $(< $log_err)"
        fi
    else
        cmd="$@"
        [ $glb_run -ne 3 ] && echo "$cmd"
        if [ $glb_run -ne 4 ]; then
            echo "$cmd" >> $log_out && echo "$cmd" >>$log_err
            $cmd

            # echo "$?"
        fi
    fi
}

#
# A function called main is required for scripts long enough to contain at
# least one other function.The last non-comment line in the file should be
# a call to main: dev_main "$@"
#
dev_main() {
    [ -f $glb_base/lib/options ] && . $glb_base/lib/options

    declare opt arg func argv

    # Prepare optional arguments
    while true ; do
        if [[ "$1" == "--" || "$1" == "-" ]]; then
            shift; break
        elif [[ "${1:0:2}" == "--" ]]; then
            opt="${1:2}"; shift
        elif [[ "${1:0:1}" == "-" ]]; then
            [ -z "${opa_als[${1:1}]}" ] && opt="${1:1}" || opt="${opa_als[${1:1}]}"; shift
            [ -z "$opt" ] && echo "Unrecognized option -${1:1}" >&2
        else
            break
        fi

        [ -z $opt ] && continue

        if [[ "$(expr index $opt '=')" -ge 1 ]]; then
            IFS='=' read -ra arg <<< "$opt"
            if [[ "$(declare -F opa_fun_${arg[0]/-/_})" == "opa_fun_${arg[0]/-/_}" ]]; then
                opa_fun_${arg[0]/-/_} "${arg[1]}" || true
            fi
        elif [[ ! -z "$1" && "${1:0:1}" != "-" ]]; then
            if [[ "$(declare -F opa_fun_${opt/-/_})" == "opa_fun_${opt/-/_}" ]]; then
                opa_fun_${opt/-/_} "$1" || shift
            fi
        else
            if [[ "$(declare -F opa_fun_${opt/-/_})" == "opa_fun_${opt/-/_}" ]]; then
                opa_fun_${opt/-/_}
            fi
        fi
    done

    # Do command function
    [ $glb_run -lt 1 ] && return 0

    if [ -z "$glb_func" ]; then
        dev_prj $@ && shift; dev_cmd $@ || return 1; shift; shift
    else
        # The default project is dev
        dev_prj || true
    fi

    dev_real_run $@
}

# Call to main function. custom function declare before here.
dev_base; dev_main $@
