#!/bin/sh
# Copyright 2016 The dev Authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

#
# Shell Style Guide: https://google.github.io/styleguide/shell.xml
#
# dev_xxx: Framwork functions, declared in bin/dev.
# glb_xxx: Global variables, declared in bin/dev.
#
# opa_rem: Optional arguments description variables(readonly).
# opa_als: Alias of optional arguments(readonly).
# opa_fun_xxx: Optional arguments function.
# opa_xxx:     Optional global variables.
#
# cfg_xxx: Configurations, declared in config file(readonly).
# cmd_xxx: Command function, declared in xxx.cmd files by user.
# xxx: Local varialbes, declared in xxx.cmd files by user. Declare
#      function-specific variables with local. Declaration and assignment
#      should be on different lines. for example:
#          local file
#          file="/path/to/file/name"
#      or (only in function)
#          declare file="/path/to/file/name"
#

# trap 'echo "# $BASH_COMMAND"' DEBUG

# Prints shell input lines as they are read
# set -o verbose

# Print command traces before executing command
# set -o xtrace

# trace ERR through pipes
set -o pipefail

# set -e : exit the script if any statement returns a non-true return value
set -o errexit

#
# Useage information.
#
dev_help_useage() {
    declare files="<cmd-file>"
    [ ! -z "$1" ] && files="$1"

    echo "Usage: dev [options] $files <cmd-function> [cmd-arguments]"; echo
}

#
# List all options
#
dev_help_options() {
    echo "Optional arguments:"; echo

    declare opt sht als
    for als in "${!opa_als[@]}"; do
        opt="${opa_als[$als]}"
        [ "$opt" != "$als" ] && sht="-$als, " || sht=""
        echo -e "  $sht--${opt//_/-} \t ${opa_rem[$opt]}"
    done

    echo
}

#
# List all command files.
#
dev_help_files() {
    echo "These are the all aviliable <cmd-file>s:"; echo

    declare ret
    dev_cmd_files $glb_wkdir/cmd
    echo ${ret:1} |tr " " "\n" |column -c $(tput cols) |fmt

    echo
}

#
# List all functions of included <cmd-file>s.
#
dev_help_functions() {
    echo "These are the all aviliable <cmd-function>s:"; echo

    for i in $(compgen -A function); do
        if [[ "${i:0:4}" == "cmd_" ]]; then
            echo -e "  ${i:4} \t in $glb_wkdir/cmd/$glb_cmd_file:$i()"
        fi
    done

    echo
}

#
# Recursively process subdirectories
#
dev_cmd_files() {
    for i in $(ls $1); do
        if [[ -d $1/$i ]]; then
            dev_cmd_files $1/$i $i/
        elif [[ "${i: -4}" == ".cmd" ]]; then
            ret="$ret $2${i:0:-4}"
        fi
    done
}

#
# Init a global constaiont
# Useage:
#     dev_const <name> <config-value> <default-value>
#
dev_const() {
    declare varname="glb_$1"
    [ -z "$2" ] && declare -gr "$varname=$3" || declare -gr "$varname=$2"
}

#
# Useage:
#     dev_wkdir <dev-path>
#
dev_wkdir() {
    declare base="$1" && [ -L "$base" ] && base=$(readlink -f "$base")
    declare -gr glb_base="$(dirname $(dirname $(realpath $base)))"
}

#
# Useage:
#     dev_scp <user-host> <command>
#
dev_scp() {
    declare cmd="scp -i $glb_private_key -o StrictHostKeyChecking=no $@"
    echo "$cmd" && $cmd
}

#
# Useage:
#     dev_ssh <user-host> <command>
#
dev_ssh() {
    declare cmd="ssh -i $glb_private_key -o StrictHostKeyChecking=no $@"
    echo "$cmd" && $cmd
}

#
# Useage:
#     dev_dnf
#
dev_dnf() {
    # -4     Resolve to IPv4 addresses only.
    # --allowerasing
    #        Allow  erasing  of  installed  packages  to  resolve dependencies.
    declare cmd="dnf -y --allowerasing -4 $@"
    echo "$cmd" && $cmd
}

#
# Useage:
#     dev_conf $@
#
dev_conf() {
    declare cfg
    # Include configuration files
    for cfg in "/etc/dev.conf", "$HOME/.dev.conf", "$glb_base/etc/dev.conf"; do
        [ -f $cfg ] && . $cfg && break
    done

    # Support multiple projects.
    if [ $# -ge 1 ] && [ ! -z $cfg_projects ] && [ -d ${cfg_projects[$1]} ]; then
        declare -gr glb_prj="$1"
        declare -gr glb_wkdir=${cfg_projects[$1]}
        cfg=${cfg_projects[$1]}/etc/dev.conf && [ -f $cfg ] && . $cfg
        return 0
    else
        declare -gr glb_prj="dev"
        declare -gr glb_wkdir=$glb_base
        return 1
    fi
}

#
# Global variables
# Useage:
#     dev_global <base-dir>
#
dev_global() {
    # The sudo prefix
    [ "$(whoami)" != "root" ] && declare -gr glb_sudo="sudo" || declare -gr glb_sudo=""

    # Private key: glb_private_key
    dev_const "private_key" "$cfg_private_key" "$HOME/.ssh/id_rsa"

    # Private key: glb_public_key
    dev_const "public_key" "$cfg_public_key" "$HOME/.ssh/id_rsa.pub"

    # For option arguments
    declare -Ag opa_rem opa_als opa_fun

    # Is run command
    declare -g glb_run=1

    # 0: Local machine, 1: Specifies nodes, 2: Specifies group 3: All nodes
    declare -g glb_run_level=0

    # Runs in the background
    declare -g glb_run_daemon=0

    # Run as root
    declare -g glb_run_sudo=0

    # Command file
    declare -g glb_cmd_file
}

#
# Prepare command files
# Useage:
#     dev_load_files <cmd-file>
#
dev_load_files() {
    [[ $# -lt 1 || ! -z "$1" ]] && return 0 || glb_cmd_file="$1"
    [ ! -f $glb_wkdir/cmd/$1.cmd ] && return 0

    # Include arguments
    [ -f $glb_wkdir/etc/dev.d/$1.conf ] && . $glb_wkdir/etc/dev.d/$1.conf

    # Include variables
    [ -f $glb_wkdir/cmd/$1.var ] && . $glb_wkdir/cmd/$1.var

    # Include command file
    . $glb_wkdir/cmd/$1.cmd
}

#
# Execute the command
# Useage:
#     dev_run_std <cmd-file> <cmd-function> [cmd-arguments]
#
dev_run() {
    # Execute the command
    if [[ $# -le 0 || -z "$1" ]]; then
        echo "dev-err: missing <cmd-file>" >&2
        echo "" >&2
        dev_help_useage >&2
        dev_help_options >&2
        dev_help_files >&2
        return 1
    elif [[ $# -eq 1 || -z "$2" ]]; then
        echo "dev-err: missing <cmd-function>" >&2
        echo "" >&2
        dev_help_useage "$1" >&2
        # dev_help_options
        dev_help_functions >&2
        return 1
    fi

    declare cmd="" fun=${2/-/_}

    [ "${fun:0:4}" == "cmd_" ] || fun="cmd_$fun"
    if [[ "$(declare -F $fun)" != "$fun" ]]; then
        echo "dev: command not found: $fun" >&2
        return 1
    fi

    if [[ $glb_run_level -eq 0 ]]; then
        # Run in local machine
        set -- "${@:3}" && dev_exec_local $fun $@
    elif [[ $glb_run_level -eq 1 ]]; then
        # FIXME Run in specifies nodes
        :
    elif [[ $glb_run_level -eq 2 ]]; then
        # FIXME Run in specifies group
        :
    elif [[ $glb_run_level -eq 3 ]]; then
        # Run in all nodes
        cmd="dev_exec_remote $glb_base/bin/dev"
        $cmd $@
    else
        echo "dev: run level error: $glb_run_level" >&2
        return 1
    fi
}

#
# Execute a command from all nodes.
# Useage:
#     dev_exec_remote dev [options] <cmd-file> <cmd-function> [cmd-arguments]
#
dev_exec_remote() {
    if [[ "${#cfg_nodes[@]}" -le 0 ]]; then
        echo "dev: empty nodes" >&2
        return 1
    fi

    declare cmd user host

    for host in "${!cfg_nodes[@]}"; do
        user="${cfg_nodes[$host]}"
        cmd="dev_ssh $user@$host"
        [ $glb_run_sudo -eq 1 ] && cmd="$cmd sudo"

        set +o errexit
        dev_exec $host $user $cmd $@
        set -o errexit

        echo
    done
}

#
# Useage:
#     dev_exec_local <command> <arguments>...
#
dev_exec_local() {
    declare host="127.0.0.1"
    declare user="$(whoami)"

    if [[ $glb_run_sudo -eq 1 ]]; then
        unset opa_fun[sudo]
        declare cmd="sudo $glb_base/bin/dev"
        for opt in "${!opa_fun[@]}"; do
            cmd="$cmd --$opt ${opa_fun[$opt]}"
        done
        dev_exec $host $user $cmd -- $glb_cmd_file $@
    else
        dev_exec $host $user $@
    fi
}

#
# Useage:
#     dev_exec <host> <user> <command> <arguments>...
#
dev_exec() {
    declare cmd log_err log_out
    declare host="$1"; shift
    declare user="$1"; shift
    declare desc="[$user@$host $(date '+%Y-%m-%d %H:%M:%S')]"

    log_out="$glb_wkdir/var/log/$host.out"
    log_err="$glb_wkdir/var/log/$host.err"

    echo "$desc" >> $log_out
    echo "$desc" >> $log_err

    chmod a+wx $log_out $log_err

    # $@ 2>&1 | tee $log_out
    # ($@ | tee $log_out) 3>&1 1>&2 2>&3 | tee $log_err
    if [[ $glb_run_daemon -eq 1 ]]; then
        cmd="nohup $@ >>$log_out 2>>$log_err &"
        echo "$cmd" && echo "$cmd" >> $log_out && echo "$cmd" >>$log_err
        $cmd

        echo "PID: $!"
        # echo "out: $(< $log_out)"
        # echo "err: $(< $log_err)"
    else
        cmd="$@"
        echo "$cmd" && echo "$cmd" >> $log_out && echo "$cmd" >>$log_err
        $cmd

        # echo "$?"
    fi
}

#
# A function called main is required for scripts long enough to contain at
# least one other function.The last non-comment line in the file should be
# a call to main: dev_main "$@"
#
dev_main() {
    . $glb_base/lib/options
    . $glb_wkdir/lib/bootstrap

    declare opt arg

    # Prepare optional arguments
    while true ; do
        if [[ "$1" == "--" ]]; then
            shift; break
        elif [[ "${1:0:2}" == "--" ]]; then
            opt="${1:2}"; shift
        elif [[ "${1:0:1}" == "-" ]]; then
            opt="${opa_als[${1:1}]}"; shift
            [ -z "$opt" ] && echo "dev: unrecognized option -${1:1}" >&2
        else
            break
        fi

        [ -z $opt ] && continue

        if [[ "$(expr index $opt '=')" -ge 1 ]]; then
            IFS='=' read -ra arg <<< "$opt"
            opa_fun[${arg[0]}]="${arg[1]}"
        elif [[ ! -z "$1" && "${1:0:1}" != "-" ]]; then
            opa_fun[$opt]="$1"; shift
        fi
    done

    # Prepare files
    dev_load_files $@

    # Do optional functions
    for opt in "${!opa_fun[@]}"; do
        opa_fun_${opt/-/_} "${opa_fun[$opt]}"
    done

    # Do command function
    [ $glb_run -ne 1 ] && return 0

    if [[ $# -ge 1 && -z $glb_cmd_file ]]; then
        echo "dev: command file not found: $glb_wkdir/cmd/$glb_cmd_file.cmd" >&2
        return 1
    fi

    btp_main $@
    dev_run $@
}

# Call to main function. custom function declare before here.
dev_wkdir $0
dev_conf $@ && shift
dev_global && dev_main $@
